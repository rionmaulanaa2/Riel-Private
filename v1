local WindUI = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/latest/download/main.lua"))()
repeat task.wait() until WindUI and WindUI.CreateWindow

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local weathers = {"Cloudy", "Snow", "Storm", "Radiant", "SharkHunt", "Wind"}

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")


local autoFarmSpeedThread
local autoMountAnehThread
local autoFarmGemsThread
local autoFarmXPThread
local autoRebirthThread
local autoFishingThread
local autoEggThread
local didEnabled = false
local flyEnabled = false
local selectedEgg = "Red Crystal"

local Window = WindUI:CreateWindow({
    Title = " Riel Private",
    Size = UDim2.fromOffset(500, 450),
    Transparent = false,
    Theme = "Dark"
})

WindUI:Notify({
    Title = "Script Loaded",
    Content = "Riel Private by Noirrr!",
    Duration = 5
})


local MainTab = Window:Tab({
    Title = "Main",
    Icon = "home"
})

local MainSection = MainTab:Section({
    Title = "Auto Farm"
})

MainSection:Button({
    Title = "Private Server",
    Description = "Move to Private Server",
    Callback = function()
        loadstring(game:HttpGet("https://pastebin.com/raw/SKSDCPhJ"))()
        WindUI:Notify({
            Title = "Private Server",
            Content = "Moving",
            Duration = 2
        })
    end
})

MainSection:Button({
    Title = "Private Server V2",
    Description = "Move to Private Server",
    Callback = function()
        loadstring(game:HttpGet("https://rawscripts.net/raw/Universal-Script-Free-Private-Server-Universal-Joshzz-56303"))()
        WindUI:Notify({
            Title = "Private Server",
            Content = "Moving",
            Duration = 2
        })
    end
})


MainSection:Button({
    Title = "Show Stats",
    Description = "Display your Money, Rebirths, Summits, etc.",
    Callback = function()
        local player = game.Players.LocalPlayer
        local leaderstats = player:FindFirstChild("leaderstats")
        local content = ""

        if leaderstats then
            for _, stat in pairs(leaderstats:GetChildren()) do
                content = content .. stat.Name .. ": " .. tostring(stat.Value) .. "\n"
            end
        else
            content = "No leaderstats found for this player."
        end

        WindUI:Notify({
            Title = "üìä Your Stats",
            Content = content,
            Duration = 6
        })
    end
})

MainSection:Button({
    Title = "Toggle Complete Void",
    Description = "Hide everything except your character (terrain, map, lighting, effects gone)",
    Callback = function()
        local Players = game:GetService("Players")
        local Workspace = game:GetService("Workspace")
        local Lighting = game:GetService("Lighting")
        local LocalPlayer = Players.LocalPlayer

        _G.VoidMode = not _G.VoidMode
        _G._ModifiedObjects = _G._ModifiedObjects or {}

        local function markModified(inst, key, val)
            if not _G._ModifiedObjects[inst] then _G._ModifiedObjects[inst] = {} end
            _G._ModifiedObjects[inst][key] = val
        end

        local function hideAll()
            -- Hide terrain completely
            if Workspace:FindFirstChildOfClass("Terrain") then
                local terrain = Workspace:FindFirstChildOfClass("Terrain")
                pcall(function() terrain:Clear() end)
                pcall(function() terrain.Transparency = 1 end)
            end

            -- Hide all parts except character
            for _, obj in ipairs(Workspace:GetDescendants()) do
                if obj:IsA("BasePart") and not obj:IsDescendantOf(LocalPlayer.Character) then
                    markModified(obj, "Transparency", obj.Transparency)
                    markModified(obj, "CanCollide", obj.CanCollide)
                    obj.Transparency = 1
                    obj.CanCollide = false
                elseif obj:IsA("ParticleEmitter") or obj:IsA("Trail") or obj:IsA("Beam") then
                    markModified(obj, "Enabled", obj.Enabled)
                    obj.Enabled = false
                elseif obj:IsA("Decal") or obj:IsA("Texture") then
                    markModified(obj, "Transparency", obj.Transparency)
                    obj.Transparency = 1
                elseif obj:IsA("Sound") then
                    markModified(obj, "Volume", obj.Volume)
                    obj.Volume = 0
                    obj:Stop()
                end
            end

            -- Clear environment visuals
            for _, eff in ipairs(Lighting:GetChildren()) do
                markModified(eff, "Parent", eff.Parent)
                eff.Parent = nil
            end

            -- Darken lighting to void black
            Lighting.Brightness = 0
            Lighting.ClockTime = 0
            Lighting.FogEnd = 0
            Lighting.Ambient = Color3.new(0,0,0)

            -- Listen for new parts and auto-hide
            if not _G._VoidConn then
                _G._VoidConn = Workspace.DescendantAdded:Connect(function(d)
                    task.defer(function()
                        if _G.VoidMode and d and d.Parent then
                            pcall(function()
                                if d:IsA("BasePart") and not d:IsDescendantOf(LocalPlayer.Character) then
                                    d.Transparency = 1
                                    d.CanCollide = false
                                end
                            end)
                        end
                    end)
                end)
            end
        end

        local function restoreAll()
            if _G._VoidConn then
                _G._VoidConn:Disconnect()
                _G._VoidConn = nil
            end

            for inst, props in pairs(_G._ModifiedObjects) do
                if inst and inst.Parent then
                    for k, v in pairs(props) do
                        pcall(function() inst[k] = v end)
                    end
                end
            end

            _G._ModifiedObjects = {}
            -- Restore basic lighting
            Lighting.Brightness = 2
            Lighting.FogEnd = 100000
            Lighting.Ambient = Color3.new(1,1,1)
        end

        if _G.VoidMode then
            hideAll()
            WindUI:Notify({
                Title = "Process",
                Content = "‚ò†Ô∏è Entered complete void mode",
                Duration = 3
            })
        else
            restoreAll()
            WindUI:Notify({
                Title = "Process",
                Content = "üåç World restored from void",
                Duration = 3
            })
        end
    end
})




MainSection:Toggle({
    Title = "Auto Summit Mount Limau",
    Description = "Teleports to Summit repeatedly (shows loop count)",
    Default = false,
    Callback = function(v)
        if autoFarmSpeedThread then
            task.cancel(autoFarmSpeedThread)
            autoFarmSpeedThread = nil
        end

        if v then
            local loopCount = 0
            WindUI:Notify({
                Title = "Auto Summit Mount Limau",
                Content = "Started teleport loop!",
                Duration = 3
            })

            autoFarmSpeedThread = task.spawn(function()
                while task.wait(2) do
                    if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then
                        continue
                    end

                    pcall(function()
                        player.Character.HumanoidRootPart.CFrame = CFrame.new(1527, 2589, -987)
						local player = game.Players.LocalPlayer
						local leaderstats = player:FindFirstChild("leaderstats")
						local content = ""

						if leaderstats then
							for _, stat in pairs(leaderstats:GetChildren()) do
								content = content .. stat.Name .. ": " .. tostring(stat.Value) .. "\n"
							end
						else
							content = "No leaderstats found for this player."
						end
                        loopCount += 1
                        if loopCount % 20 == 0 then -- show every 20 loops to avoid spam
                            WindUI:Notify({
                                Title = "üìä Your Stats",
                                Content = content,
                                Duration = 2
                            })
                        end
                    end)
                end
            end)
        else
            WindUI:Notify({
                Title = "Auto Summit Mount Limau",
                Content = "Teleport loop stopped!",
                Duration = 3
            })
        end
    end
})

MainSection:Toggle({
    Title = "Auto Summit Mount Aneh",
    Description = "Teleports based on current checkpoint stat (loops automatically)",
    Default = false,
    Callback = function(v)
        if autoMountAnehThread then
            task.cancel(autoMountAnehThread)
            autoMountAnehThread = nil
        end

        if v then
            local player = game.Players.LocalPlayer
            local loopCount = 0

            local teleports = {
                [0] = CFrame.new(-76, 527, 936),   -- checkpoint 0
                [1] = CFrame.new(-91, 526, 892),   -- checkpoint 1
                [2] = CFrame.new(-22, 597, 505),   -- checkpoint 2
                [3] = CFrame.new(473, 604, 444),   -- checkpoint 3
                [4] = CFrame.new(1170, 649, 668),  -- checkpoint 4
                [5] = CFrame.new(2124, 790, 1024), -- checkpoint 5
                [6] = CFrame.new(2727, 917, 1194), -- checkpoint 6
                [7] = CFrame.new(3449, 1312, 1772),-- checkpoint 7
                [8] = CFrame.new(3162, 1615, 2780) -- finish
            }

            local maxCheckpoint = 8

            WindUI:Notify({
                Title = "Auto Summit Mount Aneh",
                Content = "Started teleport loop!",
                Duration = 3
            })

            autoMountAnehThread = task.spawn(function()
                while task.wait(2) do
                    if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then
                        continue
                    end

                    pcall(function()
                        local hrp = player.Character.HumanoidRootPart
                        local leaderstats = player:FindFirstChild("leaderstats")

                        local currentCheckpoint = 0

                        -- üß≠ Read current checkpoint stat safely
                        if leaderstats then
                            local checkpointStat = leaderstats:FindFirstChild("checkpoint") or leaderstats:FindFirstChild("Checkpoint")
                            if checkpointStat then
                                currentCheckpoint = tonumber(checkpointStat.Value) or 0
                            end
                        end

                        -- üß© Calculate next checkpoint
                        local nextCheckpoint = currentCheckpoint + 1
                        if nextCheckpoint > maxCheckpoint then
                            nextCheckpoint = 0
                        end

                        -- üöÄ Teleport to next checkpoint
                        if teleports[nextCheckpoint] then
                            hrp.CFrame = teleports[nextCheckpoint]
                            
                        else
                            WindUI:Notify({
                                Title = "Error",
                                Content = "Invalid checkpoint index: " .. tostring(nextCheckpoint),
                                Duration = 2
                            })
                        end

                        loopCount += 1

                        -- üìä Show stats every 20 loops
                        if loopCount % 20 == 0 then
                            local content = ""
                            if leaderstats then
                                for _, stat in pairs(leaderstats:GetChildren()) do
                                    content = content .. stat.Name .. ": " .. tostring(stat.Value) .. "\n"
                                end
                            else
                                content = "No leaderstats found."
                            end
                            WindUI:Notify({
                                Title = "üìä Your Stats",
                                Content = content,
                                Duration = 3
                            })
                        end
                    end)
                end
            end)
        else
            WindUI:Notify({
                Title = "Auto Summit Mount Aneh",
                Content = "Teleport loop stopped!",
                Duration = 3
            })
        end
    end
})

MainSection:Toggle({
    Title = "Auto Summit Mount Botak",
    Description = "Teleports to the next Stage based on your current Stage stat",
    Default = false,
    Callback = function(v)
        if autoMountBotakThread then
            task.cancel(autoMountBotakThread)
            autoMountBotakThread = nil
        end

        if v then
            local player = game.Players.LocalPlayer
            local loopCount = 0

            -- Stage 1‚Äì17 coordinates
            local teleports = {
                [1]  = CFrame.new(456, 315, -629),
                [2]  = CFrame.new(625, 414, -94),
                [3]  = CFrame.new(584, 463, 249),
                [4]  = CFrame.new(557, 504, 465),
                [5]  = CFrame.new(287, 620, 818),
                [6]  = CFrame.new(198, 777, 582),
                [7]  = CFrame.new(50, 1033, -399),
                [8]  = CFrame.new(-243, 1176, -785),
                [9]  = CFrame.new(-117, 1185, -1119),
                [10] = CFrame.new(203, 1285, -1510),
                [11] = CFrame.new(733, 1398, -1596),
                [12] = CFrame.new(739, 1345, -835),
                [13] = CFrame.new(758, 1309, -360),
                [14] = CFrame.new(1109, 1643, 381),
                [15] = CFrame.new(1438, 1747, 526),
                [16] = CFrame.new(1731, 1754, 472),
                [17] = CFrame.new(1913, 2057, -345)
            }

            local maxStage = 17

            WindUI:Notify({
                Title = "Auto Summit Mount Botak",
                Content = "Started teleport loop (teleporting to next Stage)...",
                Duration = 3
            })

            autoMountBotakThread = task.spawn(function()
                while task.wait(2) do
                    if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then
                        continue
                    end

                    pcall(function()
                        local hrp = player.Character.HumanoidRootPart
                        local leaderstats = player:FindFirstChild("leaderstats")

                        if not leaderstats then return end

                        local stageStat = leaderstats:FindFirstChild("Stage")
                        if not stageStat then return end

                        local currentStage = tonumber(stageStat.Value) or 0

                        -- Calculate next stage (wrap to 1 after 17)
                        local nextStage = currentStage + 1
                        if nextStage > maxStage then
                            nextStage = 1
                        end

                        -- Teleport to next stage
                        local target = teleports[nextStage]
                        if target then
                            hrp.CFrame = target
                            WindUI:Notify({
                                Title = "Teleporting...",
                                Content = "Moved to Stage " .. tostring(nextStage),
                                Duration = 2
                            })
                        else
                            WindUI:Notify({
                                Title = "Error",
                                Content = "No coordinate for Stage " .. tostring(nextStage),
                                Duration = 2
                            })
                        end

                        loopCount += 1

                        -- Show stats every 20 loops
                        if loopCount % 20 == 0 then
                            local content = ""
                            for _, stat in pairs(leaderstats:GetChildren()) do
                                content = content .. stat.Name .. ": " .. tostring(stat.Value) .. "\n"
                            end
                            WindUI:Notify({
                                Title = "üìä Your Stats",
                                Content = content,
                                Duration = 3
                            })
                        end
                    end)
                end
            end)
        else
            WindUI:Notify({
                Title = "Auto Summit Mount Botak",
                Content = "Teleport loop stopped!",
                Duration = 3
            })
        end
    end
})






MainSection:Toggle({
    Title = "Auto Farm Gems",
    Description = "Collects Gems",
    Default = false,
    Callback = function(v)
        if autoFarmGemsThread then
            task.cancel(autoFarmGemsThread)
            autoFarmGemsThread = nil
        end
        
        if v then
            autoFarmGemsThread = task.spawn(function()
                while task.wait(0.01) do
                    pcall(function()
                        local orbEvent = ReplicatedStorage.rEvents.orbEvent
                        orbEvent:FireServer("collectOrb", "Gem", "City")
                    end)
                end
            end)
        end
    end
})

MainSection:Toggle({
    Title = "Auto Farm XP-Level",
    Description = "Collects Yellow Orbs",
    Default = false,
    Callback = function(v)
        if autoFarmXPThread then
            task.cancel(autoFarmXPThread)
            autoFarmXPThread = nil
        end
        
        if v then
            autoFarmXPThread = task.spawn(function()
                while task.wait(0.01) do
                    pcall(function()
                        local orbEvent = ReplicatedStorage.rEvents.orbEvent
                        orbEvent:FireServer("collectOrb", "Yellow Orb", "City")
                    end)
                end
            end)
        end
    end
})

MainSection:Toggle({
    Title = "Auto Rebirth",
    Description = "Auto Rebirth",
    Default = false,
    Callback = function(v)
        if autoRebirthThread then
            pcall(function()
                task.cancel(autoRebirthThread)
            end)
            autoRebirthThread = nil
        end
        
        if v then
            autoRebirthThread = task.spawn(function()
                while task.wait(0.01) do
                    if not autoRebirthThread then break end
                    pcall(function()
                        local rebirthEvent = ReplicatedStorage.rEvents.rebirthEvent
                        rebirthEvent:FireServer("rebirthRequest")
                    end)
                end
            end)
        end
    end
})

local FishTab = Window:Tab({
    Title = "Fishing",
    Icon = "home"
})


local FishSection = FishTab:Section({
    Title = "Menu"
})

-- Auto Sell buttons
FishSection:Button({
    Title = "Sell All",
    Description = "Sell all fish",
    Callback = function()
        pcall(function()
				local RFSellAllItems = ReplicatedStorage.Packages._Index["sleitnick_net@0.2.0"].net["RF/SellAllItems"]
                RFSellAllItems:InvokeServer()
            end)
        WindUI:Notify({
            Title = "Process",
            Content = "Selling All Fish",
            Duration = 2
        })
    end
})




local delayBetweenSteps = 0.01 -- adjust delay between fishing steps
local autoFishingThread -- store the active loop thread

FishSection:Toggle({
    Title = "Auto Fishing",
    Description = "Automatically perform fishing steps in loop",
    Default = false,
    Callback = function(v)
        -- fetch remotes once
        local Net = ReplicatedStorage:WaitForChild("Packages")
            :WaitForChild("_Index")
            :WaitForChild("sleitnick_net@0.2.0")
            :WaitForChild("net")

        local RF_ChargeFishingRod = Net:WaitForChild("RF/ChargeFishingRod")
        local RF_RequestFishingMinigameStarted = Net:WaitForChild("RF/RequestFishingMinigameStarted")
        local RE_FishingCompleted = Net:WaitForChild("RE/FishingCompleted")

        -- stop previous thread if toggle turned off
        if autoFishingThread then
            task.cancel(autoFishingThread)
            autoFishingThread = nil
        end

        if v then
            autoFishingThread = task.spawn(function()
                while true do
                    pcall(function()
                        -- ‚úÖ Step 1: Charge Fishing Rod
						local amazingStrength = 1761558933.803717
                        RF_ChargeFishingRod:InvokeServer(amazingStrength)

                        task.wait(2)

                        -- ‚úÖ Step 2: Start Fishing Minigame
                        local args2 = {
                            -0.5718746185302734,
                            1.0,
                            tick()
                        }
                        RF_RequestFishingMinigameStarted:InvokeServer(unpack(args2))

                        task.wait(2)

                        -- ‚úÖ Step 3: Complete Fishing
                        RE_FishingCompleted:FireServer()

                       
                    end)

                    if not autoFishingThread then break end
                end
            end)

            WindUI:Notify({
                Title = "Auto Fishing",
                Content = "üé£ Auto fishing started!",
                Duration = 2
            })
        else
            WindUI:Notify({
                Title = "Auto Fishing",
                Content = "üõë Auto fishing stopped.",
                Duration = 2
            })
        end
    end
})


FishSection:Button({
    Title = "Add Friend All",
    Description = "Add all players in the server as friends",
    Callback = function()
        local Players = game:GetService("Players")
        local LocalPlayer = Players.LocalPlayer

        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer then
                pcall(function()
                    LocalPlayer:RequestFriendship(player)
                end)
            end
        end

        WindUI:Notify({
            Title = "Process Complete",
            Content = "Sent friend requests to all players!",
            Duration = 2
        })
    end
})

FishSection:Button({
    Title = "Teleport Sisipus",
    Description = "Teleport Sisipus",
    Callback = function()
        local player = game:GetService("Players").LocalPlayer
        if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            player.Character.HumanoidRootPart.CFrame = CFrame.new(-3697,-135,-1009)
            WindUI:Notify({
                Title = "Process Complete",
                Content = "Teleported to Sisipus",
                Duration = 2
            })
        else
            WindUI:Notify({
                Title = "Error",
                Content = "Character not found!",
                Duration = 2
            })
        end
    end
})




local WeatherTab = Window:Tab({
    Title = "Weather",
    Icon = "egg"
})

local WeatherSection = WeatherTab:Section({
    Title = "Weather Selection"
})

-- Weather buttons
WeatherSection:Button({
    Title = "Storm",
    Description = "Select Storm",
    Callback = function()
        local RFPurchaseWeatherEvent = ReplicatedStorage.Packages._Index["sleitnick_net@0.2.0"].net["RF/PurchaseWeatherEvent"]
		weather = "Storm"
        RFPurchaseWeatherEvent:InvokeServer(weather)
        WindUI:Notify({
            Title = "Storm",
            Content = "Storm",
            Duration = 2
        })
    end
})

WeatherSection:Button({
    Title = "Cloudy",
    Description = "Select Cloudy",
    Callback = function()
        local RFPurchaseWeatherEvent = ReplicatedStorage.Packages._Index["sleitnick_net@0.2.0"].net["RF/PurchaseWeatherEvent"]
		weather = "Cloudy"
        RFPurchaseWeatherEvent:InvokeServer(weather)
        WindUI:Notify({
            Title = "Cloudy",
            Content = "Cloudy",
            Duration = 2
        })
    end
})

WeatherSection:Button({
    Title = "Wind",
    Description = "Select Wind",
    Callback = function()
        local RFPurchaseWeatherEvent = ReplicatedStorage.Packages._Index["sleitnick_net@0.2.0"].net["RF/PurchaseWeatherEvent"]
		weather = "Wind"
        RFPurchaseWeatherEvent:InvokeServer(weather)
        WindUI:Notify({
            Title = "Wind",
            Content = "Wind",
            Duration = 2
        })
    end
})

WeatherSection:Button({
    Title = "Yellow Crystal",
    Description = "Select Yellow Crystal",
    Callback = function()
        selectedEgg = "Yellow Crystal"
        WindUI:Notify({
            Title = "Egg Selected",
            Content = "Selected: Yellow Crystal",
            Duration = 2
        })
    end
})

WeatherSection:Button({
    Title = "Lightning Crystal",
    Description = "Select Lightning Crystal",
    Callback = function()
        selectedEgg = "Lightning Crystal"
        WindUI:Notify({
            Title = "Egg Selected",
            Content = "Selected: Lightning Crystal",
            Duration = 2
        })
    end
})

WeatherSection:Button({
    Title = "Snow Crystal",
    Description = "Select Snow Crystal",
    Callback = function()
        selectedEgg = "Snow Crystal"
        WindUI:Notify({
            Title = "Egg Selected",
            Content = "Selected: Snow Crystal",
            Duration = 2
        })
    end
})

WeatherSection:Button({
    Title = "Lava Crystal",
    Description = "Select Lava Crystal",
    Callback = function()
        selectedEgg = "Lava Crystal"
        WindUI:Notify({
            Title = "Egg Selected",
            Content = "Selected: Lava Crystal",
            Duration = 2
        })
    end
})

WeatherSection:Button({
    Title = "Inferno Crystal",
    Description = "Select Inferno Crystal",
    Callback = function()
        selectedEgg = "Inferno Crystal"
        WindUI:Notify({
            Title = "Egg Selected",
            Content = "Selected: Inferno Crystal",
            Duration = 2
        })
    end
})

WeatherSection:Button({
    Title = "Electro Legends Crystal",
    Description = "Select Electro Legends Crystal",
    Callback = function()
        selectedEgg = "Electro Legends Crystal"
        WindUI:Notify({
            Title = "Egg Selected",
            Content = "Selected: Electro Legends Crystal",
            Duration = 2
        })
    end
})

WeatherSection:Button({
    Title = "Jungle Crystal",
    Description = "Select Jungle Crystal",
    Callback = function()
        selectedEgg = "Jungle Crystal"
        WindUI:Notify({
            Title = "Egg Selected",
            Content = "Selected: Jungle Crystal",
            Duration = 2
        })
    end
})

WeatherSection:Toggle({
    Title = "Auto Buy Selected Egg",
    Description = "Currently: " .. selectedEgg,
    Default = false,
    Callback = function(v)
        if autoEggThread then
            pcall(function()
                task.cancel(autoEggThread)
            end)
            autoEggThread = nil
        end
        
        if v then
            autoEggThread = task.spawn(function()
                while task.wait(0.01) do
                    if not autoEggThread then break end
                    pcall(function()
                        local openCrystalRemote = ReplicatedStorage.rEvents.openCrystalRemote
                        openCrystalRemote:InvokeServer("openCrystal", selectedEgg)
                    end)
                end
            end)
        end
    end
})

local MovementTab = Window:Tab({
    Title = "Movement",
    Icon = "wind"
})

local MovementSection = MovementTab:Section({
    Title = "Flight"
})

local flySpeed = 50
local flyControl = {f = 0, b = 0, l = 0, r = 0}
local flyConnection
local bodyVelocity
local bodyGyro

local function startFly()
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart then return end
    
    bodyVelocity = Instance.new("BodyVelocity")
    bodyVelocity.Velocity = Vector3.new(0, 0, 0)
    bodyVelocity.MaxForce = Vector3.new(9e9, 9e9, 9e9)
    bodyVelocity.Parent = humanoidRootPart
    
    bodyGyro = Instance.new("BodyGyro")
    bodyGyro.MaxTorque = Vector3.new(9e9, 9e9, 9e9)
    bodyGyro.CFrame = humanoidRootPart.CFrame
    bodyGyro.Parent = humanoidRootPart
    
    flyConnection = RunService.Heartbeat:Connect(function()
        if not flyEnabled then return end
        
        local camera = workspace.CurrentCamera
        local moveDirection = Vector3.new(
            flyControl.r - flyControl.l,
            0,
            flyControl.f - flyControl.b
        )
        
        if moveDirection:Dot(moveDirection) > 0 then
            moveDirection = moveDirection.Unit
        end
        
        local velocity = (camera.CFrame.RightVector * moveDirection.X + camera.CFrame.LookVector * moveDirection.Z) * flySpeed
        bodyVelocity.Velocity = velocity
        bodyGyro.CFrame = camera.CFrame
    end)
end

local function stopFly()
    if bodyVelocity then bodyVelocity:Destroy() bodyVelocity = nil end
    if bodyGyro then bodyGyro:Destroy() bodyGyro = nil end
    if flyConnection then flyConnection:Disconnect() flyConnection = nil end
    flyControl = {f = 0, b = 0, l = 0, r = 0}
end

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed or not flyEnabled then return end
    
    if input.KeyCode == Enum.KeyCode.W then
        flyControl.f = 1
    elseif input.KeyCode == Enum.KeyCode.S then
        flyControl.b = 1
    elseif input.KeyCode == Enum.KeyCode.A then
        flyControl.l = 1
    elseif input.KeyCode == Enum.KeyCode.D then
        flyControl.r = 1
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if not flyEnabled then return end
    
    if input.KeyCode == Enum.KeyCode.W then
        flyControl.f = 0
    elseif input.KeyCode == Enum.KeyCode.S then
        flyControl.b = 0
    elseif input.KeyCode == Enum.KeyCode.A then
        flyControl.l = 0
    elseif input.KeyCode == Enum.KeyCode.D then
        flyControl.r = 0
    end
end)

MovementSection:Toggle({
    Title = "Fly",
    Description = "Enable flight with WASD",
    Default = false,
    Callback = function(v)
        flyEnabled = v
        if flyEnabled then
            startFly()
        else
            stopFly()
        end
    end
})

local noFallEnabled = false
local fallConnection

local function enableNoFall()
    if fallConnection then fallConnection:Disconnect() end
    if not humanoid then return end

    fallConnection = humanoid.StateChanged:Connect(function(_, newState)
        if noFallEnabled and (newState == Enum.HumanoidStateType.Freefall or newState == Enum.HumanoidStateType.Landed) then
            -- Stop any possible fall damage
            -- task.wait(0.1)
            -- humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
			humanoid:SetStateEnabled(Enum.HumanoidStateType.Freefall, false)
            humanoid:SetStateEnabled(Enum.HumanoidStateType.Landed, false)
        end
    end)
end

local function disableNoFall()
    if fallConnection then
        fallConnection:Disconnect()
        fallConnection = nil
    end
end

MovementSection:Toggle({
    Title = "No Fall Damage",
    Description = "Prevents taking damage after falling",
    Default = false,
    Callback = function(v)
        noFallEnabled = v
        if v then
            enableNoFall()
            WindUI:Notify({
                Title = "No Fall Damage",
                Content = "No fall damage enabled!",
                Duration = 3
            })
        else
            disableNoFall()
            WindUI:Notify({
                Title = "No Fall Damage",
                Content = "No fall damage disabled!",
                Duration = 3
            })
        end
    end
})

local DiscordTab = Window:Tab({
    Title = "Discord",
    Icon = "message-circle"
})

local DiscordSection = DiscordTab:Section({
    Title = "Community"
})

DiscordSection:Button({
    Title = "Join our discord for more (Copy)",
    Description = "Click to copy Discord link",
    Callback = function()
        setclipboard("https://discord.gg/AYYfZVCRZG")
        WindUI:Notify({
            Title = "Discord Link Copied",
            Content = "Discord link copied to clipboard!",
            Duration = 3
        })
    end
})

player.CharacterAdded:Connect(function(char)
    character = char
    humanoid = char:WaitForChild("Humanoid")
    if flyEnabled then
        task.wait(1)
        stopFly()
        startFly()
    end
end)
